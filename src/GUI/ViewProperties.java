package GUI;

import Server.Address;
import Server.Criteria;
import Server.Property;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;

public class ViewProperties {
    private JPanel panel1;
    private JPanel titlePanel;
    private JPanel buttonPanel;
    private JButton criteriaCreateButton;
    private JButton backButton;
    private JButton emailButton;
    private JList displayList;
    private JFrame frame;
    private CriteriaGUI criteriaGUI;
    private EmailBodyGUI emailBodyGUI;

    ArrayList<Property> propertiesArray;
    private PrintWriter outBuffer;
    private BufferedReader inBuffer;

    public ViewProperties(PrintWriter outBuffer, BufferedReader inBuffer) {
        frame = new JFrame("Prop Viewer");
        frame.setContentPane(panel1);
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frame.pack();
        backButton.addActionListener(new ALBack());
        emailButton.addActionListener(new ALOpenEmail());
        criteriaCreateButton.addActionListener(new ALCreateCriteria());
        propertiesArray = new ArrayList<>();
        this.outBuffer = outBuffer;
        this.inBuffer = inBuffer;

        //Fill in data


        frame.setVisible(true);
    }

    private class ALBack implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            frame.dispose();
        }
    }

    private class ALOpenEmail implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent actionEvent) {
            emailBodyGUI = new EmailBodyGUI(outBuffer, inBuffer, new ALEmail());
        }
    }

    private class ALEmail implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {
            int slectedIndex = displayList.getSelectedIndex();
            int propID = -1;
            if (slectedIndex >= 0) {
                propID = propertiesArray.get(slectedIndex).getListID();
            }
            //TODO work with the client
            System.out.println(propID);
            if (propID >= 0) {
                String send = "EMAIL#" + propID + "#" + emailBodyGUI.pullBody();
                outBuffer.println(send);
                System.out.println("sent: " + send);
                try {
                    System.out.println(Client.readServer(inBuffer));
                } catch (IOException ex) {
                    ex.printStackTrace();
                } catch (InterruptedException ex) {
                    ex.printStackTrace();
                }
            }
        }
    }

    private class ALCreateCriteria implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {
            criteriaGUI = new CriteriaGUI(new ALRegCritera());

        }
    }

    private class ALRegCritera implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent actionEvent) {


            Criteria criteria = criteriaGUI.pullCriteria();

            if (criteria != null) {

                outBuffer.println("SEARCH#" + criteria.toServerString());
                System.out.println(criteria.toServerString());
                String[] parts = new String[0];
                try {
                    parts = Client.readServer(inBuffer).split("#");
                } catch (IOException e) {
                    e.printStackTrace();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

                Property properties[] = new Property[parts.length];
                propertiesArray.clear();
                for (int i = 0; i < parts.length; i++) {
                    if (parts[i].length() < 10) {
                        continue;
                    }
                    if (parts[i].length() != 0) {
                        properties[i] = new Property(parts[i]);
                        propertiesArray.add(properties[i]);
                    }
                }
                panel1.remove(displayList);
                displayList = new JList(properties);
                panel1.add(displayList);

            }
        }
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel1 = new JPanel();
        panel1.setLayout(new BorderLayout(0, 0));
        titlePanel = new JPanel();
        titlePanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        titlePanel.setBackground(new Color(-11038572));
        panel1.add(titlePanel, BorderLayout.NORTH);
        final JLabel label1 = new JLabel();
        Font label1Font = this.$$$getFont$$$("Bradley Hand ITC", Font.BOLD, 24, label1.getFont());
        if (label1Font != null) label1.setFont(label1Font);
        label1.setForeground(new Color(-16579837));
        label1.setText("Registered Properties");
        titlePanel.add(label1, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        buttonPanel = new JPanel();
        buttonPanel.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
        buttonPanel.setBackground(new Color(-11038572));
        panel1.add(buttonPanel, BorderLayout.SOUTH);
        emailButton = new JButton();
        emailButton.setText("Email");
        buttonPanel.add(emailButton);
        criteriaCreateButton = new JButton();
        criteriaCreateButton.setText("criteriaCreate");
        buttonPanel.add(criteriaCreateButton);
        backButton = new JButton();
        backButton.setText("Back");
        buttonPanel.add(backButton);
        displayList = new JList();
        panel1.add(displayList, BorderLayout.CENTER);
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel1;
    }

}
